
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA COMPARE DIVIDE ELSE ENDFILE EQUAL GE GREATER ID IF INT LBLOCK LBRACKET LE LESS LPAREN MINUS NE NUMBER PLUS RBLOCK RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration_list declarationdeclaration_list : declarationdeclaration : var_declaration\n\t\t\t\t  | fun_declarationvar_declaration : type_specifier ID SEMICOLONvar_declaration : type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONfun_declaration : type_specifier ID LPAREN params RPAREN compount_stmttype_specifier : INTtype_specifier : VOIDparams : param_listparams : VOIDparam_list : param_list COMMA paramparam_list : paramparam_list : emptyparam : type_specifier IDparam : type_specifier ID LBRACKET RBRACKETcompount_stmt : LBLOCK local_declarations statement_list RBLOCKlocal_declarations : local_declarations var_declarationlocal_declarations : emptystatement_list : statement_list statementstatement_list : emptystatement : expression_stmt\n\t\t\t\t| compount_stmt\n\t\t\t\t| selection_stmt\n\t\t\t\t| iteration_stmt\n\t\t\t\t| return_stmt\n\texpression_stmt : expression SEMICOLONexpression_stmt : SEMICOLONselection_stmt : IF LPAREN expression RPAREN statementselection_stmt : IF LPAREN expression RPAREN statement ELSE statementiteration_stmt : WHILE LPAREN expression RPAREN statementreturn_stmt : RETURN SEMICOLONreturn_stmt : RETURN expression SEMICOLONexpression : var EQUAL expressionexpression : simple_expressionvar : IDvar : ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expressionsimple_expression : additive_expressionrelop : LESS \n\t\t\t| LE\n\t\t\t| GREATER\n\t\t\t| GE\n\t\t\t| NE\n\t\t\t| INT\n\t\t\t| COMPARE\n\tadditive_expression : additive_expression addop termadditive_expression : termaddop : PLUS \n\t\t\t| MINUS\n\tterm : term mulop factorterm : factormulop : \tTIMES\n\t\t\t\t| DIVIDE\n\tfactor : LPAREN expression RPARENfactor : varfactor : callfactor : NUMBERcall : ID LPAREN args RPARENargs : args_list\n\t\t\t| empty\n\targs_list : args_list COMMA expressionargs_list : expressionempty :'
    
_lr_action_items = {'EQUAL':([44,46,97,],[-37,73,-38,]),'RBLOCK':([13,25,26,30,31,33,34,35,37,39,40,41,43,45,52,53,74,75,92,101,103,105,],[-6,-7,-65,-65,-20,-22,-19,37,-18,-27,-23,-29,-24,-21,-26,-25,-28,-33,-34,-32,-30,-31,]),'LBLOCK':([13,22,25,26,30,31,33,34,35,37,39,40,41,43,45,52,53,74,75,92,96,100,101,103,104,105,],[-6,26,-7,-65,-65,-20,-22,-19,26,-18,-27,-23,-29,-24,-21,-26,-25,-28,-33,-34,26,26,-32,-30,26,-31,]),'WHILE':([13,25,26,30,31,33,34,35,37,39,40,41,43,45,52,53,74,75,92,96,100,101,103,104,105,],[-6,-7,-65,-65,-20,-22,-19,38,-18,-27,-23,-29,-24,-21,-26,-25,-28,-33,-34,38,38,-32,-30,38,-31,]),'LE':([42,44,46,49,50,51,55,83,85,93,94,97,99,],[65,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'SEMICOLON':([10,13,21,25,26,30,31,33,34,35,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,74,75,76,83,84,85,91,92,93,94,96,97,99,100,101,103,104,105,],[13,-6,25,-7,-65,-65,-20,-22,-19,41,-18,-27,-23,-29,-40,-24,-37,-21,-57,74,75,-58,-49,-59,-26,-25,-53,-36,13,-28,-33,92,-57,-39,-48,-35,-34,-52,-56,41,-38,-60,41,-32,-30,41,-31,]),'NUMBER':([11,13,25,26,30,31,33,34,35,37,39,40,41,43,45,48,52,53,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,81,92,96,98,100,101,103,104,105,],[14,-6,-7,-65,-65,-20,-22,-19,51,-18,-27,-23,-29,-24,-21,51,-26,-25,51,51,-41,-47,-43,-51,51,-42,-50,-45,51,-44,-46,51,51,51,-28,-33,-54,51,-55,51,-34,51,51,51,-32,-30,51,-31,]),'$end':([1,2,4,5,6,9,13,25,27,37,],[-3,0,-1,-5,-4,-2,-6,-7,-8,-18,]),'TIMES':([44,46,49,50,51,55,83,85,93,94,97,99,],[-37,-57,-58,77,-59,-53,-57,77,-52,-56,-38,-60,]),'ID':([3,7,8,13,18,19,25,26,30,31,33,34,35,36,37,39,40,41,43,45,48,52,53,54,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,81,92,96,98,100,101,103,104,105,],[-10,10,-9,-6,-10,23,-7,-65,-65,-20,-22,-19,44,58,-18,-27,-23,-29,-24,-21,44,-26,-25,44,44,-41,-47,-43,-51,44,-42,-50,-45,44,-44,-46,44,44,44,-28,-33,-54,44,-55,44,-34,44,44,44,-32,-30,44,-31,]),'GE':([42,44,46,49,50,51,55,83,85,93,94,97,99,],[69,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'COMMA':([12,16,17,20,23,29,32,42,44,46,49,50,51,55,56,83,84,85,87,90,91,93,94,97,99,102,],[-65,-14,-15,24,-16,-13,-17,-40,-37,-57,-58,-49,-59,-53,-36,-57,-39,-48,98,-64,-35,-52,-56,-38,-60,-63,]),'LESS':([42,44,46,49,50,51,55,83,85,93,94,97,99,],[60,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'PLUS':([42,44,46,49,50,51,55,83,84,85,93,94,97,99,],[66,-37,-57,-58,-49,-59,-53,-57,66,-48,-52,-56,-38,-60,]),'COMPARE':([42,44,46,49,50,51,55,83,85,93,94,97,99,],[61,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'RETURN':([13,25,26,30,31,33,34,35,37,39,40,41,43,45,52,53,74,75,92,96,100,101,103,104,105,],[-6,-7,-65,-65,-20,-22,-19,48,-18,-27,-23,-29,-24,-21,-26,-25,-28,-33,-34,48,48,-32,-30,48,-31,]),'GREATER':([42,44,46,49,50,51,55,83,85,93,94,97,99,],[62,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'RBRACKET':([14,28,42,44,46,49,50,51,55,56,83,84,85,86,91,93,94,97,99,],[21,32,-40,-37,-57,-58,-49,-59,-53,-36,-57,-39,-48,97,-35,-52,-56,-38,-60,]),'MINUS':([42,44,46,49,50,51,55,83,84,85,93,94,97,99,],[63,-37,-57,-58,-49,-59,-53,-57,63,-48,-52,-56,-38,-60,]),'VOID':([0,1,4,5,6,9,12,13,24,25,26,27,30,31,34,37,],[3,-3,3,-5,-4,-2,18,-6,3,-7,-65,-8,3,-20,-19,-18,]),'ELSE':([37,39,40,41,43,52,53,74,75,92,101,103,105,],[-18,-27,-23,-29,-24,-26,-25,-28,-33,-34,-32,104,-31,]),'RPAREN':([12,15,16,17,18,20,23,29,32,42,44,46,49,50,51,55,56,72,80,82,83,84,85,87,88,89,90,91,93,94,95,97,99,102,],[-65,22,-14,-15,-12,-11,-16,-13,-17,-40,-37,-57,-58,-49,-59,-53,-36,-65,94,96,-57,-39,-48,-61,-62,99,-64,-35,-52,-56,100,-38,-60,-63,]),'NE':([42,44,46,49,50,51,55,83,85,93,94,97,99,],[67,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'DIVIDE':([44,46,49,50,51,55,83,85,93,94,97,99,],[-37,-57,-58,79,-59,-53,-57,79,-52,-56,-38,-60,]),'LBRACKET':([10,23,44,58,],[11,28,71,11,]),'LPAREN':([10,13,25,26,30,31,33,34,35,37,38,39,40,41,43,44,45,48,52,53,54,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,81,92,96,98,100,101,103,104,105,],[12,-6,-7,-65,-65,-20,-22,-19,54,-18,59,-27,-23,-29,-24,72,-21,54,-26,-25,54,81,54,-41,-47,-43,-51,54,-42,-50,-45,54,-44,-46,54,54,54,-28,-33,-54,54,-55,54,-34,54,54,54,-32,-30,54,-31,]),'INT':([0,1,4,5,6,9,12,13,24,25,26,27,30,31,34,37,42,44,46,49,50,51,55,83,85,93,94,97,99,],[8,-3,8,-5,-4,-2,8,-6,8,-7,-65,-8,8,-20,-19,-18,70,-37,-57,-58,-49,-59,-53,-57,-48,-52,-56,-38,-60,]),'IF':([13,25,26,30,31,33,34,35,37,39,40,41,43,45,52,53,74,75,92,96,100,101,103,104,105,],[-6,-7,-65,-65,-20,-22,-19,57,-18,-27,-23,-29,-24,-21,-26,-25,-28,-33,-34,57,57,-32,-30,57,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'addop':([42,84,],[68,68,]),'return_stmt':([35,96,100,104,],[39,39,39,39,]),'args_list':([72,],[87,]),'expression_stmt':([35,96,100,104,],[40,40,40,40,]),'statement_list':([30,],[35,]),'args':([72,],[89,]),'fun_declaration':([0,4,],[5,5,]),'additive_expression':([35,48,54,59,64,71,72,73,81,96,98,100,104,],[42,42,42,42,84,42,42,42,42,42,42,42,42,]),'compount_stmt':([22,35,96,100,104,],[27,43,43,43,43,]),'statement':([35,96,100,104,],[45,101,103,105,]),'type_specifier':([0,4,12,24,30,],[7,7,19,19,36,]),'var':([35,48,54,59,64,68,71,72,73,78,81,96,98,100,104,],[46,46,46,46,83,83,46,46,46,83,46,46,46,46,46,]),'expression':([35,48,54,59,71,72,73,81,96,98,100,104,],[47,76,80,82,86,90,91,95,47,102,47,47,]),'local_declarations':([26,],[30,]),'declaration':([0,4,],[1,9,]),'params':([12,],[15,]),'program':([0,],[2,]),'param':([12,24,],[16,29,]),'relop':([42,],[64,]),'declaration_list':([0,],[4,]),'iteration_stmt':([35,96,100,104,],[52,52,52,52,]),'empty':([12,26,30,72,],[17,31,33,88,]),'var_declaration':([0,4,30,],[6,6,34,]),'mulop':([50,85,],[78,78,]),'term':([35,48,54,59,64,68,71,72,73,81,96,98,100,104,],[50,50,50,50,50,85,50,50,50,50,50,50,50,50,]),'call':([35,48,54,59,64,68,71,72,73,78,81,96,98,100,104,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'factor':([35,48,54,59,64,68,71,72,73,78,81,96,98,100,104,],[55,55,55,55,55,55,55,55,55,93,55,55,55,55,55,]),'param_list':([12,],[20,]),'simple_expression':([35,48,54,59,71,72,73,81,96,98,100,104,],[56,56,56,56,56,56,56,56,56,56,56,56,]),'selection_stmt':([35,96,100,104,],[53,53,53,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','test.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list_1','test.py',14),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list_2','test.py',18),
  ('declaration -> var_declaration','declaration',1,'p_declaration','test.py',22),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','test.py',23),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration_1','test.py',27),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration_2','test.py',31),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt','fun_declaration',6,'p_fun_declaration','test.py',35),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier_1','test.py',39),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier_2','test.py',43),
  ('params -> param_list','params',1,'p_params_1','test.py',47),
  ('params -> VOID','params',1,'p_params_2','test.py',51),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list_1','test.py',55),
  ('param_list -> param','param_list',1,'p_param_list_2','test.py',59),
  ('param_list -> empty','param_list',1,'p_param_list_3','test.py',63),
  ('param -> type_specifier ID','param',2,'p_param_1','test.py',67),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param_2','test.py',71),
  ('compount_stmt -> LBLOCK local_declarations statement_list RBLOCK','compount_stmt',4,'p_compount_stmt','test.py',75),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations_1','test.py',79),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations_2','test.py',83),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_1','test.py',87),
  ('statement_list -> empty','statement_list',1,'p_statement_list_2','test.py',91),
  ('statement -> expression_stmt','statement',1,'p_statement','test.py',95),
  ('statement -> compount_stmt','statement',1,'p_statement','test.py',96),
  ('statement -> selection_stmt','statement',1,'p_statement','test.py',97),
  ('statement -> iteration_stmt','statement',1,'p_statement','test.py',98),
  ('statement -> return_stmt','statement',1,'p_statement','test.py',99),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt_1','test.py',104),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt_2','test.py',108),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt_1','test.py',112),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt_2','test.py',116),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','test.py',120),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt_1','test.py',124),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt_2','test.py',128),
  ('expression -> var EQUAL expression','expression',3,'p_expression_1','test.py',132),
  ('expression -> simple_expression','expression',1,'p_expression_2','test.py',136),
  ('var -> ID','var',1,'p_var_1','test.py',140),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var_2','test.py',144),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression_1','test.py',148),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression_2','test.py',152),
  ('relop -> LESS','relop',1,'p_relop','test.py',157),
  ('relop -> LE','relop',1,'p_relop','test.py',158),
  ('relop -> GREATER','relop',1,'p_relop','test.py',159),
  ('relop -> GE','relop',1,'p_relop','test.py',160),
  ('relop -> NE','relop',1,'p_relop','test.py',161),
  ('relop -> INT','relop',1,'p_relop','test.py',162),
  ('relop -> COMPARE','relop',1,'p_relop','test.py',163),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression_1','test.py',168),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression_2','test.py',172),
  ('addop -> PLUS','addop',1,'p_addop','test.py',176),
  ('addop -> MINUS','addop',1,'p_addop','test.py',177),
  ('term -> term mulop factor','term',3,'p_term_1','test.py',182),
  ('term -> factor','term',1,'p_term_2','test.py',186),
  ('mulop -> TIMES','mulop',1,'p_mulop','test.py',190),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','test.py',191),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_1','test.py',196),
  ('factor -> var','factor',1,'p_factor_2','test.py',200),
  ('factor -> call','factor',1,'p_factor_3','test.py',204),
  ('factor -> NUMBER','factor',1,'p_factor_4','test.py',208),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','test.py',212),
  ('args -> args_list','args',1,'p_args','test.py',216),
  ('args -> empty','args',1,'p_args','test.py',217),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list_1','test.py',222),
  ('args_list -> expression','args_list',1,'p_args_list_2','test.py',226),
  ('empty -> <empty>','empty',0,'p_empty','test.py',230),
]
