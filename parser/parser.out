Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ENDFILE

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration
Rule 5     declaration -> fun_declaration
Rule 6     var_declaration -> type_specifier ID SEMICOLON
Rule 7     var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 8     fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt
Rule 9     type_specifier -> INT
Rule 10    type_specifier -> VOID
Rule 11    params -> param_list
Rule 12    params -> VOID
Rule 13    param_list -> param_list COMMA param
Rule 14    param_list -> param
Rule 15    param_list -> empty
Rule 16    param -> type_specifier ID
Rule 17    param -> type_specifier ID LBRACKET RBRACKET
Rule 18    compount_stmt -> LBLOCK local_declarations statement_list RBLOCK
Rule 19    local_declarations -> local_declarations var_declaration
Rule 20    local_declarations -> empty
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> empty
Rule 23    statement -> expression_stmt
Rule 24    statement -> compount_stmt
Rule 25    statement -> selection_stmt
Rule 26    statement -> iteration_stmt
Rule 27    statement -> return_stmt
Rule 28    expression_stmt -> expression SEMICOLON
Rule 29    expression_stmt -> SEMICOLON
Rule 30    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 31    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 32    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 33    return_stmt -> RETURN SEMICOLON
Rule 34    return_stmt -> RETURN expression SEMICOLON
Rule 35    expression -> var EQUAL expression
Rule 36    expression -> simple_expression
Rule 37    var -> ID
Rule 38    var -> ID LBRACKET expression RBRACKET
Rule 39    simple_expression -> additive_expression relop additive_expression
Rule 40    simple_expression -> additive_expression
Rule 41    relop -> LESS
Rule 42    relop -> LE
Rule 43    relop -> GREATER
Rule 44    relop -> GE
Rule 45    relop -> NE
Rule 46    relop -> INT
Rule 47    relop -> COMPARE
Rule 48    additive_expression -> additive_expression addop term
Rule 49    additive_expression -> term
Rule 50    addop -> PLUS
Rule 51    addop -> MINUS
Rule 52    term -> term mulop factor
Rule 53    term -> factor
Rule 54    mulop -> TIMES
Rule 55    mulop -> DIVIDE
Rule 56    factor -> LPAREN expression RPAREN
Rule 57    factor -> var
Rule 58    factor -> call
Rule 59    factor -> NUMBER
Rule 60    call -> ID LPAREN args RPAREN
Rule 61    args -> args_list
Rule 62    args -> empty
Rule 63    args_list -> args_list COMMA expression
Rule 64    args_list -> expression
Rule 65    empty -> <empty>

Terminals, with rules where they appear

COMMA                : 13 63
COMPARE              : 47
DIVIDE               : 55
ELSE                 : 31
ENDFILE              : 
EQUAL                : 35
GE                   : 44
GREATER              : 43
ID                   : 6 7 8 16 17 37 38 60
IF                   : 30 31
INT                  : 9 46
LBLOCK               : 18
LBRACKET             : 7 17 38
LE                   : 42
LESS                 : 41
LPAREN               : 8 30 31 32 56 60
MINUS                : 51
NE                   : 45
NUMBER               : 7 59
PLUS                 : 50
RBLOCK               : 18
RBRACKET             : 7 17 38
RETURN               : 33 34
RPAREN               : 8 30 31 32 56 60
SEMICOLON            : 6 7 28 29 33 34
TIMES                : 54
VOID                 : 10 12
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

additive_expression  : 39 39 40 48
addop                : 48
args                 : 60
args_list            : 61 63
call                 : 58
compount_stmt        : 8 24
declaration          : 2 3
declaration_list     : 1 2
empty                : 15 20 22 62
expression           : 28 30 31 32 34 35 38 56 63 64
expression_stmt      : 23
factor               : 52 53
fun_declaration      : 5
iteration_stmt       : 26
local_declarations   : 18 19
mulop                : 52
param                : 13 14
param_list           : 11 13
params               : 8
program              : 0
relop                : 39
return_stmt          : 27
selection_stmt       : 25
simple_expression    : 36
statement            : 21 30 31 31 32
statement_list       : 18 21
term                 : 48 49 52
type_specifier       : 6 7 8 16 17
var                  : 35 57
var_declaration      : 4 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (9) type_specifier -> . INT
    (10) type_specifier -> . VOID

    INT             shift and go to state 8
    VOID            shift and go to state 3

    var_declaration                shift and go to state 6
    program                        shift and go to state 2
    declaration                    shift and go to state 1
    type_specifier                 shift and go to state 7
    declaration_list               shift and go to state 4
    fun_declaration                shift and go to state 5

state 1

    (3) declaration_list -> declaration .

    INT             reduce using rule 3 (declaration_list -> declaration .)
    VOID            reduce using rule 3 (declaration_list -> declaration .)
    $end            reduce using rule 3 (declaration_list -> declaration .)


state 2

    (0) S' -> program .



state 3

    (10) type_specifier -> VOID .

    ID              reduce using rule 10 (type_specifier -> VOID .)


state 4

    (1) program -> declaration_list .
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration
    (5) declaration -> . fun_declaration
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (9) type_specifier -> . INT
    (10) type_specifier -> . VOID

    $end            reduce using rule 1 (program -> declaration_list .)
    INT             shift and go to state 8
    VOID            shift and go to state 3

    var_declaration                shift and go to state 6
    declaration                    shift and go to state 9
    type_specifier                 shift and go to state 7
    fun_declaration                shift and go to state 5

state 5

    (5) declaration -> fun_declaration .

    INT             reduce using rule 5 (declaration -> fun_declaration .)
    VOID            reduce using rule 5 (declaration -> fun_declaration .)
    $end            reduce using rule 5 (declaration -> fun_declaration .)


state 6

    (4) declaration -> var_declaration .

    INT             reduce using rule 4 (declaration -> var_declaration .)
    VOID            reduce using rule 4 (declaration -> var_declaration .)
    $end            reduce using rule 4 (declaration -> var_declaration .)


state 7

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (8) fun_declaration -> type_specifier . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 10


state 8

    (9) type_specifier -> INT .

    ID              reduce using rule 9 (type_specifier -> INT .)


state 9

    (2) declaration_list -> declaration_list declaration .

    INT             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 10

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (8) fun_declaration -> type_specifier ID . LPAREN params RPAREN compount_stmt

    SEMICOLON       shift and go to state 13
    LBRACKET        shift and go to state 11
    LPAREN          shift and go to state 12


state 11

    (7) var_declaration -> type_specifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 14


state 12

    (8) fun_declaration -> type_specifier ID LPAREN . params RPAREN compount_stmt
    (11) params -> . param_list
    (12) params -> . VOID
    (13) param_list -> . param_list COMMA param
    (14) param_list -> . param
    (15) param_list -> . empty
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (65) empty -> .
    (9) type_specifier -> . INT
    (10) type_specifier -> . VOID

    VOID            shift and go to state 18
    COMMA           reduce using rule 65 (empty -> .)
    RPAREN          reduce using rule 65 (empty -> .)
    INT             shift and go to state 8

    params                         shift and go to state 15
    empty                          shift and go to state 17
    param                          shift and go to state 16
    type_specifier                 shift and go to state 19
    param_list                     shift and go to state 20

state 13

    (6) var_declaration -> type_specifier ID SEMICOLON .

    INT             reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    VOID            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    SEMICOLON       reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)
    NUMBER          reduce using rule 6 (var_declaration -> type_specifier ID SEMICOLON .)


state 14

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 21


state 15

    (8) fun_declaration -> type_specifier ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 22


state 16

    (14) param_list -> param .

    COMMA           reduce using rule 14 (param_list -> param .)
    RPAREN          reduce using rule 14 (param_list -> param .)


state 17

    (15) param_list -> empty .

    COMMA           reduce using rule 15 (param_list -> empty .)
    RPAREN          reduce using rule 15 (param_list -> empty .)


state 18

    (12) params -> VOID .
    (10) type_specifier -> VOID .

    RPAREN          reduce using rule 12 (params -> VOID .)
    ID              reduce using rule 10 (type_specifier -> VOID .)


state 19

    (16) param -> type_specifier . ID
    (17) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 23


state 20

    (11) params -> param_list .
    (13) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 11 (params -> param_list .)
    COMMA           shift and go to state 24


state 21

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 25


state 22

    (8) fun_declaration -> type_specifier ID LPAREN params RPAREN . compount_stmt
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK

    LBLOCK          shift and go to state 26

    compount_stmt                  shift and go to state 27

state 23

    (16) param -> type_specifier ID .
    (17) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 16 (param -> type_specifier ID .)
    RPAREN          reduce using rule 16 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 28


state 24

    (13) param_list -> param_list COMMA . param
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (9) type_specifier -> . INT
    (10) type_specifier -> . VOID

    INT             shift and go to state 8
    VOID            shift and go to state 3

    param                          shift and go to state 29
    type_specifier                 shift and go to state 19

state 25

    (7) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    INT             reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBLOCK          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 7 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 26

    (18) compount_stmt -> LBLOCK . local_declarations statement_list RBLOCK
    (19) local_declarations -> . local_declarations var_declaration
    (20) local_declarations -> . empty
    (65) empty -> .

    INT             reduce using rule 65 (empty -> .)
    VOID            reduce using rule 65 (empty -> .)
    RBLOCK          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    LBLOCK          reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    LPAREN          reduce using rule 65 (empty -> .)
    NUMBER          reduce using rule 65 (empty -> .)

    empty                          shift and go to state 31
    local_declarations             shift and go to state 30

state 27

    (8) fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .

    INT             reduce using rule 8 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    VOID            reduce using rule 8 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    $end            reduce using rule 8 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)


state 28

    (17) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 32


state 29

    (13) param_list -> param_list COMMA param .

    COMMA           reduce using rule 13 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 13 (param_list -> param_list COMMA param .)


state 30

    (18) compount_stmt -> LBLOCK local_declarations . statement_list RBLOCK
    (19) local_declarations -> local_declarations . var_declaration
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . empty
    (6) var_declaration -> . type_specifier ID SEMICOLON
    (7) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (65) empty -> .
    (9) type_specifier -> . INT
    (10) type_specifier -> . VOID

    RBLOCK          reduce using rule 65 (empty -> .)
    SEMICOLON       reduce using rule 65 (empty -> .)
    LBLOCK          reduce using rule 65 (empty -> .)
    IF              reduce using rule 65 (empty -> .)
    WHILE           reduce using rule 65 (empty -> .)
    RETURN          reduce using rule 65 (empty -> .)
    ID              reduce using rule 65 (empty -> .)
    LPAREN          reduce using rule 65 (empty -> .)
    NUMBER          reduce using rule 65 (empty -> .)
    INT             shift and go to state 8
    VOID            shift and go to state 3

    var_declaration                shift and go to state 34
    statement_list                 shift and go to state 35
    empty                          shift and go to state 33
    type_specifier                 shift and go to state 36

state 31

    (20) local_declarations -> empty .

    INT             reduce using rule 20 (local_declarations -> empty .)
    VOID            reduce using rule 20 (local_declarations -> empty .)
    RBLOCK          reduce using rule 20 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 20 (local_declarations -> empty .)
    LBLOCK          reduce using rule 20 (local_declarations -> empty .)
    IF              reduce using rule 20 (local_declarations -> empty .)
    WHILE           reduce using rule 20 (local_declarations -> empty .)
    RETURN          reduce using rule 20 (local_declarations -> empty .)
    ID              reduce using rule 20 (local_declarations -> empty .)
    LPAREN          reduce using rule 20 (local_declarations -> empty .)
    NUMBER          reduce using rule 20 (local_declarations -> empty .)


state 32

    (17) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)


state 33

    (22) statement_list -> empty .

    RBLOCK          reduce using rule 22 (statement_list -> empty .)
    SEMICOLON       reduce using rule 22 (statement_list -> empty .)
    LBLOCK          reduce using rule 22 (statement_list -> empty .)
    IF              reduce using rule 22 (statement_list -> empty .)
    WHILE           reduce using rule 22 (statement_list -> empty .)
    RETURN          reduce using rule 22 (statement_list -> empty .)
    ID              reduce using rule 22 (statement_list -> empty .)
    LPAREN          reduce using rule 22 (statement_list -> empty .)
    NUMBER          reduce using rule 22 (statement_list -> empty .)


state 34

    (19) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)


state 35

    (18) compount_stmt -> LBLOCK local_declarations statement_list . RBLOCK
    (21) statement_list -> statement_list . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    RBLOCK          shift and go to state 37
    SEMICOLON       shift and go to state 41
    LBLOCK          shift and go to state 26
    IF              shift and go to state 57
    WHILE           shift and go to state 38
    RETURN          shift and go to state 48
    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    term                           shift and go to state 50
    return_stmt                    shift and go to state 39
    expression_stmt                shift and go to state 40
    iteration_stmt                 shift and go to state 52
    additive_expression            shift and go to state 42
    compount_stmt                  shift and go to state 43
    call                           shift and go to state 49
    statement                      shift and go to state 45
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    selection_stmt                 shift and go to state 53
    expression                     shift and go to state 47

state 36

    (6) var_declaration -> type_specifier . ID SEMICOLON
    (7) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID              shift and go to state 58


state 37

    (18) compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .

    RBLOCK          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SEMICOLON       reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LBLOCK          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    IF              reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    WHILE           reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RETURN          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ID              reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LPAREN          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    NUMBER          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSE            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    INT             reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VOID            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    $end            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)


state 38

    (32) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 59


state 39

    (27) statement -> return_stmt .

    RBLOCK          reduce using rule 27 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 27 (statement -> return_stmt .)
    LBLOCK          reduce using rule 27 (statement -> return_stmt .)
    IF              reduce using rule 27 (statement -> return_stmt .)
    WHILE           reduce using rule 27 (statement -> return_stmt .)
    RETURN          reduce using rule 27 (statement -> return_stmt .)
    ID              reduce using rule 27 (statement -> return_stmt .)
    LPAREN          reduce using rule 27 (statement -> return_stmt .)
    NUMBER          reduce using rule 27 (statement -> return_stmt .)
    ELSE            reduce using rule 27 (statement -> return_stmt .)


state 40

    (23) statement -> expression_stmt .

    RBLOCK          reduce using rule 23 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 23 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 23 (statement -> expression_stmt .)
    IF              reduce using rule 23 (statement -> expression_stmt .)
    WHILE           reduce using rule 23 (statement -> expression_stmt .)
    RETURN          reduce using rule 23 (statement -> expression_stmt .)
    ID              reduce using rule 23 (statement -> expression_stmt .)
    LPAREN          reduce using rule 23 (statement -> expression_stmt .)
    NUMBER          reduce using rule 23 (statement -> expression_stmt .)
    ELSE            reduce using rule 23 (statement -> expression_stmt .)


state 41

    (29) expression_stmt -> SEMICOLON .

    RBLOCK          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 29 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 29 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 29 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 29 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 29 (expression_stmt -> SEMICOLON .)


state 42

    (39) simple_expression -> additive_expression . relop additive_expression
    (40) simple_expression -> additive_expression .
    (48) additive_expression -> additive_expression . addop term
    (41) relop -> . LESS
    (42) relop -> . LE
    (43) relop -> . GREATER
    (44) relop -> . GE
    (45) relop -> . NE
    (46) relop -> . INT
    (47) relop -> . COMPARE
    (50) addop -> . PLUS
    (51) addop -> . MINUS

    RPAREN          reduce using rule 40 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 40 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 40 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 40 (simple_expression -> additive_expression .)
    LESS            shift and go to state 60
    LE              shift and go to state 65
    GREATER         shift and go to state 62
    GE              shift and go to state 69
    NE              shift and go to state 67
    INT             shift and go to state 70
    COMPARE         shift and go to state 61
    PLUS            shift and go to state 66
    MINUS           shift and go to state 63

    relop                          shift and go to state 64
    addop                          shift and go to state 68

state 43

    (24) statement -> compount_stmt .

    RBLOCK          reduce using rule 24 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 24 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 24 (statement -> compount_stmt .)
    IF              reduce using rule 24 (statement -> compount_stmt .)
    WHILE           reduce using rule 24 (statement -> compount_stmt .)
    RETURN          reduce using rule 24 (statement -> compount_stmt .)
    ID              reduce using rule 24 (statement -> compount_stmt .)
    LPAREN          reduce using rule 24 (statement -> compount_stmt .)
    NUMBER          reduce using rule 24 (statement -> compount_stmt .)
    ELSE            reduce using rule 24 (statement -> compount_stmt .)


state 44

    (37) var -> ID .
    (38) var -> ID . LBRACKET expression RBRACKET
    (60) call -> ID . LPAREN args RPAREN

    TIMES           reduce using rule 37 (var -> ID .)
    DIVIDE          reduce using rule 37 (var -> ID .)
    LESS            reduce using rule 37 (var -> ID .)
    LE              reduce using rule 37 (var -> ID .)
    GREATER         reduce using rule 37 (var -> ID .)
    GE              reduce using rule 37 (var -> ID .)
    NE              reduce using rule 37 (var -> ID .)
    INT             reduce using rule 37 (var -> ID .)
    COMPARE         reduce using rule 37 (var -> ID .)
    PLUS            reduce using rule 37 (var -> ID .)
    MINUS           reduce using rule 37 (var -> ID .)
    SEMICOLON       reduce using rule 37 (var -> ID .)
    RPAREN          reduce using rule 37 (var -> ID .)
    RBRACKET        reduce using rule 37 (var -> ID .)
    COMMA           reduce using rule 37 (var -> ID .)
    EQUAL           reduce using rule 37 (var -> ID .)
    LBRACKET        shift and go to state 71
    LPAREN          shift and go to state 72


state 45

    (21) statement_list -> statement_list statement .

    RBLOCK          reduce using rule 21 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 21 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 21 (statement_list -> statement_list statement .)
    IF              reduce using rule 21 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 21 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 21 (statement_list -> statement_list statement .)
    ID              reduce using rule 21 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 21 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 21 (statement_list -> statement_list statement .)


state 46

    (35) expression -> var . EQUAL expression
    (57) factor -> var .

    EQUAL           shift and go to state 73
    TIMES           reduce using rule 57 (factor -> var .)
    DIVIDE          reduce using rule 57 (factor -> var .)
    LESS            reduce using rule 57 (factor -> var .)
    LE              reduce using rule 57 (factor -> var .)
    GREATER         reduce using rule 57 (factor -> var .)
    GE              reduce using rule 57 (factor -> var .)
    NE              reduce using rule 57 (factor -> var .)
    INT             reduce using rule 57 (factor -> var .)
    COMPARE         reduce using rule 57 (factor -> var .)
    PLUS            reduce using rule 57 (factor -> var .)
    MINUS           reduce using rule 57 (factor -> var .)
    RPAREN          reduce using rule 57 (factor -> var .)
    COMMA           reduce using rule 57 (factor -> var .)
    RBRACKET        reduce using rule 57 (factor -> var .)
    SEMICOLON       reduce using rule 57 (factor -> var .)


state 47

    (28) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 74


state 48

    (33) return_stmt -> RETURN . SEMICOLON
    (34) return_stmt -> RETURN . expression SEMICOLON
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 75
    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    additive_expression            shift and go to state 42
    factor                         shift and go to state 55
    term                           shift and go to state 50
    call                           shift and go to state 49
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 76

state 49

    (58) factor -> call .

    TIMES           reduce using rule 58 (factor -> call .)
    DIVIDE          reduce using rule 58 (factor -> call .)
    LESS            reduce using rule 58 (factor -> call .)
    LE              reduce using rule 58 (factor -> call .)
    GREATER         reduce using rule 58 (factor -> call .)
    GE              reduce using rule 58 (factor -> call .)
    NE              reduce using rule 58 (factor -> call .)
    INT             reduce using rule 58 (factor -> call .)
    COMPARE         reduce using rule 58 (factor -> call .)
    PLUS            reduce using rule 58 (factor -> call .)
    MINUS           reduce using rule 58 (factor -> call .)
    RPAREN          reduce using rule 58 (factor -> call .)
    COMMA           reduce using rule 58 (factor -> call .)
    RBRACKET        reduce using rule 58 (factor -> call .)
    SEMICOLON       reduce using rule 58 (factor -> call .)


state 50

    (49) additive_expression -> term .
    (52) term -> term . mulop factor
    (54) mulop -> . TIMES
    (55) mulop -> . DIVIDE

    LESS            reduce using rule 49 (additive_expression -> term .)
    LE              reduce using rule 49 (additive_expression -> term .)
    GREATER         reduce using rule 49 (additive_expression -> term .)
    GE              reduce using rule 49 (additive_expression -> term .)
    NE              reduce using rule 49 (additive_expression -> term .)
    INT             reduce using rule 49 (additive_expression -> term .)
    COMPARE         reduce using rule 49 (additive_expression -> term .)
    PLUS            reduce using rule 49 (additive_expression -> term .)
    MINUS           reduce using rule 49 (additive_expression -> term .)
    SEMICOLON       reduce using rule 49 (additive_expression -> term .)
    RBRACKET        reduce using rule 49 (additive_expression -> term .)
    RPAREN          reduce using rule 49 (additive_expression -> term .)
    COMMA           reduce using rule 49 (additive_expression -> term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 79

    mulop                          shift and go to state 78

state 51

    (59) factor -> NUMBER .

    TIMES           reduce using rule 59 (factor -> NUMBER .)
    DIVIDE          reduce using rule 59 (factor -> NUMBER .)
    LESS            reduce using rule 59 (factor -> NUMBER .)
    LE              reduce using rule 59 (factor -> NUMBER .)
    GREATER         reduce using rule 59 (factor -> NUMBER .)
    GE              reduce using rule 59 (factor -> NUMBER .)
    NE              reduce using rule 59 (factor -> NUMBER .)
    INT             reduce using rule 59 (factor -> NUMBER .)
    COMPARE         reduce using rule 59 (factor -> NUMBER .)
    PLUS            reduce using rule 59 (factor -> NUMBER .)
    MINUS           reduce using rule 59 (factor -> NUMBER .)
    RPAREN          reduce using rule 59 (factor -> NUMBER .)
    COMMA           reduce using rule 59 (factor -> NUMBER .)
    RBRACKET        reduce using rule 59 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 59 (factor -> NUMBER .)


state 52

    (26) statement -> iteration_stmt .

    RBLOCK          reduce using rule 26 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 26 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 26 (statement -> iteration_stmt .)
    IF              reduce using rule 26 (statement -> iteration_stmt .)
    WHILE           reduce using rule 26 (statement -> iteration_stmt .)
    RETURN          reduce using rule 26 (statement -> iteration_stmt .)
    ID              reduce using rule 26 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 26 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 26 (statement -> iteration_stmt .)
    ELSE            reduce using rule 26 (statement -> iteration_stmt .)


state 53

    (25) statement -> selection_stmt .

    RBLOCK          reduce using rule 25 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 25 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 25 (statement -> selection_stmt .)
    IF              reduce using rule 25 (statement -> selection_stmt .)
    WHILE           reduce using rule 25 (statement -> selection_stmt .)
    RETURN          reduce using rule 25 (statement -> selection_stmt .)
    ID              reduce using rule 25 (statement -> selection_stmt .)
    LPAREN          reduce using rule 25 (statement -> selection_stmt .)
    NUMBER          reduce using rule 25 (statement -> selection_stmt .)
    ELSE            reduce using rule 25 (statement -> selection_stmt .)


state 54

    (56) factor -> LPAREN . expression RPAREN
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    additive_expression            shift and go to state 42
    factor                         shift and go to state 55
    term                           shift and go to state 50
    call                           shift and go to state 49
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 80

state 55

    (53) term -> factor .

    TIMES           reduce using rule 53 (term -> factor .)
    DIVIDE          reduce using rule 53 (term -> factor .)
    LESS            reduce using rule 53 (term -> factor .)
    LE              reduce using rule 53 (term -> factor .)
    GREATER         reduce using rule 53 (term -> factor .)
    GE              reduce using rule 53 (term -> factor .)
    NE              reduce using rule 53 (term -> factor .)
    INT             reduce using rule 53 (term -> factor .)
    COMPARE         reduce using rule 53 (term -> factor .)
    PLUS            reduce using rule 53 (term -> factor .)
    MINUS           reduce using rule 53 (term -> factor .)
    SEMICOLON       reduce using rule 53 (term -> factor .)
    RPAREN          reduce using rule 53 (term -> factor .)
    RBRACKET        reduce using rule 53 (term -> factor .)
    COMMA           reduce using rule 53 (term -> factor .)


state 56

    (36) expression -> simple_expression .

    SEMICOLON       reduce using rule 36 (expression -> simple_expression .)
    RPAREN          reduce using rule 36 (expression -> simple_expression .)
    RBRACKET        reduce using rule 36 (expression -> simple_expression .)
    COMMA           reduce using rule 36 (expression -> simple_expression .)


state 57

    (30) selection_stmt -> IF . LPAREN expression RPAREN statement
    (31) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 81


state 58

    (6) var_declaration -> type_specifier ID . SEMICOLON
    (7) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON       shift and go to state 13
    LBRACKET        shift and go to state 11


state 59

    (32) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    call                           shift and go to state 49
    additive_expression            shift and go to state 42
    term                           shift and go to state 50
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 82

state 60

    (41) relop -> LESS .

    LPAREN          reduce using rule 41 (relop -> LESS .)
    NUMBER          reduce using rule 41 (relop -> LESS .)
    ID              reduce using rule 41 (relop -> LESS .)


state 61

    (47) relop -> COMPARE .

    LPAREN          reduce using rule 47 (relop -> COMPARE .)
    NUMBER          reduce using rule 47 (relop -> COMPARE .)
    ID              reduce using rule 47 (relop -> COMPARE .)


state 62

    (43) relop -> GREATER .

    LPAREN          reduce using rule 43 (relop -> GREATER .)
    NUMBER          reduce using rule 43 (relop -> GREATER .)
    ID              reduce using rule 43 (relop -> GREATER .)


state 63

    (51) addop -> MINUS .

    LPAREN          reduce using rule 51 (addop -> MINUS .)
    NUMBER          reduce using rule 51 (addop -> MINUS .)
    ID              reduce using rule 51 (addop -> MINUS .)


state 64

    (39) simple_expression -> additive_expression relop . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (60) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51
    ID              shift and go to state 44

    term                           shift and go to state 50
    call                           shift and go to state 49
    var                            shift and go to state 83
    factor                         shift and go to state 55
    additive_expression            shift and go to state 84

state 65

    (42) relop -> LE .

    LPAREN          reduce using rule 42 (relop -> LE .)
    NUMBER          reduce using rule 42 (relop -> LE .)
    ID              reduce using rule 42 (relop -> LE .)


state 66

    (50) addop -> PLUS .

    LPAREN          reduce using rule 50 (addop -> PLUS .)
    NUMBER          reduce using rule 50 (addop -> PLUS .)
    ID              reduce using rule 50 (addop -> PLUS .)


state 67

    (45) relop -> NE .

    LPAREN          reduce using rule 45 (relop -> NE .)
    NUMBER          reduce using rule 45 (relop -> NE .)
    ID              reduce using rule 45 (relop -> NE .)


state 68

    (48) additive_expression -> additive_expression addop . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (60) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51
    ID              shift and go to state 44

    term                           shift and go to state 85
    call                           shift and go to state 49
    factor                         shift and go to state 55
    var                            shift and go to state 83

state 69

    (44) relop -> GE .

    LPAREN          reduce using rule 44 (relop -> GE .)
    NUMBER          reduce using rule 44 (relop -> GE .)
    ID              reduce using rule 44 (relop -> GE .)


state 70

    (46) relop -> INT .

    LPAREN          reduce using rule 46 (relop -> INT .)
    NUMBER          reduce using rule 46 (relop -> INT .)
    ID              reduce using rule 46 (relop -> INT .)


state 71

    (38) var -> ID LBRACKET . expression RBRACKET
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    additive_expression            shift and go to state 42
    factor                         shift and go to state 55
    term                           shift and go to state 50
    call                           shift and go to state 49
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 86

state 72

    (60) call -> ID LPAREN . args RPAREN
    (61) args -> . args_list
    (62) args -> . empty
    (63) args_list -> . args_list COMMA expression
    (64) args_list -> . expression
    (65) empty -> .
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 65 (empty -> .)
    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    term                           shift and go to state 50
    args_list                      shift and go to state 87
    empty                          shift and go to state 88
    args                           shift and go to state 89
    call                           shift and go to state 49
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    additive_expression            shift and go to state 42
    expression                     shift and go to state 90

state 73

    (35) expression -> var EQUAL . expression
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    additive_expression            shift and go to state 42
    factor                         shift and go to state 55
    term                           shift and go to state 50
    call                           shift and go to state 49
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 91

state 74

    (28) expression_stmt -> expression SEMICOLON .

    RBLOCK          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 28 (expression_stmt -> expression SEMICOLON .)


state 75

    (33) return_stmt -> RETURN SEMICOLON .

    RBLOCK          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 33 (return_stmt -> RETURN SEMICOLON .)


state 76

    (34) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 92


state 77

    (54) mulop -> TIMES .

    LPAREN          reduce using rule 54 (mulop -> TIMES .)
    NUMBER          reduce using rule 54 (mulop -> TIMES .)
    ID              reduce using rule 54 (mulop -> TIMES .)


state 78

    (52) term -> term mulop . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (60) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51
    ID              shift and go to state 44

    call                           shift and go to state 49
    factor                         shift and go to state 93
    var                            shift and go to state 83

state 79

    (55) mulop -> DIVIDE .

    LPAREN          reduce using rule 55 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 55 (mulop -> DIVIDE .)
    ID              reduce using rule 55 (mulop -> DIVIDE .)


state 80

    (56) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 94


state 81

    (30) selection_stmt -> IF LPAREN . expression RPAREN statement
    (31) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    call                           shift and go to state 49
    additive_expression            shift and go to state 42
    term                           shift and go to state 50
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 95

state 82

    (32) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 96


state 83

    (57) factor -> var .

    TIMES           reduce using rule 57 (factor -> var .)
    DIVIDE          reduce using rule 57 (factor -> var .)
    LESS            reduce using rule 57 (factor -> var .)
    LE              reduce using rule 57 (factor -> var .)
    GREATER         reduce using rule 57 (factor -> var .)
    GE              reduce using rule 57 (factor -> var .)
    NE              reduce using rule 57 (factor -> var .)
    INT             reduce using rule 57 (factor -> var .)
    COMPARE         reduce using rule 57 (factor -> var .)
    PLUS            reduce using rule 57 (factor -> var .)
    MINUS           reduce using rule 57 (factor -> var .)
    SEMICOLON       reduce using rule 57 (factor -> var .)
    RPAREN          reduce using rule 57 (factor -> var .)
    RBRACKET        reduce using rule 57 (factor -> var .)
    COMMA           reduce using rule 57 (factor -> var .)


state 84

    (39) simple_expression -> additive_expression relop additive_expression .
    (48) additive_expression -> additive_expression . addop term
    (50) addop -> . PLUS
    (51) addop -> . MINUS

    RPAREN          reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 39 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 66
    MINUS           shift and go to state 63

    addop                          shift and go to state 68

state 85

    (48) additive_expression -> additive_expression addop term .
    (52) term -> term . mulop factor
    (54) mulop -> . TIMES
    (55) mulop -> . DIVIDE

    LESS            reduce using rule 48 (additive_expression -> additive_expression addop term .)
    LE              reduce using rule 48 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 48 (additive_expression -> additive_expression addop term .)
    GE              reduce using rule 48 (additive_expression -> additive_expression addop term .)
    NE              reduce using rule 48 (additive_expression -> additive_expression addop term .)
    INT             reduce using rule 48 (additive_expression -> additive_expression addop term .)
    COMPARE         reduce using rule 48 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 48 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 48 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 48 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 48 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 48 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 48 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 79

    mulop                          shift and go to state 78

state 86

    (38) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 97


state 87

    (61) args -> args_list .
    (63) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 61 (args -> args_list .)
    COMMA           shift and go to state 98


state 88

    (62) args -> empty .

    RPAREN          reduce using rule 62 (args -> empty .)


state 89

    (60) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 99


state 90

    (64) args_list -> expression .

    COMMA           reduce using rule 64 (args_list -> expression .)
    RPAREN          reduce using rule 64 (args_list -> expression .)


state 91

    (35) expression -> var EQUAL expression .

    SEMICOLON       reduce using rule 35 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 35 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 35 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 35 (expression -> var EQUAL expression .)


state 92

    (34) return_stmt -> RETURN expression SEMICOLON .

    RBLOCK          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 34 (return_stmt -> RETURN expression SEMICOLON .)


state 93

    (52) term -> term mulop factor .

    TIMES           reduce using rule 52 (term -> term mulop factor .)
    DIVIDE          reduce using rule 52 (term -> term mulop factor .)
    LESS            reduce using rule 52 (term -> term mulop factor .)
    LE              reduce using rule 52 (term -> term mulop factor .)
    GREATER         reduce using rule 52 (term -> term mulop factor .)
    GE              reduce using rule 52 (term -> term mulop factor .)
    NE              reduce using rule 52 (term -> term mulop factor .)
    INT             reduce using rule 52 (term -> term mulop factor .)
    COMPARE         reduce using rule 52 (term -> term mulop factor .)
    PLUS            reduce using rule 52 (term -> term mulop factor .)
    MINUS           reduce using rule 52 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 52 (term -> term mulop factor .)
    RPAREN          reduce using rule 52 (term -> term mulop factor .)
    RBRACKET        reduce using rule 52 (term -> term mulop factor .)
    COMMA           reduce using rule 52 (term -> term mulop factor .)


state 94

    (56) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    INT             reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    COMPARE         reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 56 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 56 (factor -> LPAREN expression RPAREN .)


state 95

    (30) selection_stmt -> IF LPAREN expression . RPAREN statement
    (31) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 100


state 96

    (32) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 41
    LBLOCK          shift and go to state 26
    IF              shift and go to state 57
    WHILE           shift and go to state 38
    RETURN          shift and go to state 48
    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    expression_stmt                shift and go to state 40
    term                           shift and go to state 50
    return_stmt                    shift and go to state 39
    iteration_stmt                 shift and go to state 52
    additive_expression            shift and go to state 42
    compount_stmt                  shift and go to state 43
    call                           shift and go to state 49
    statement                      shift and go to state 101
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    selection_stmt                 shift and go to state 53
    expression                     shift and go to state 47

state 97

    (38) var -> ID LBRACKET expression RBRACKET .

    TIMES           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    LE              reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    GE              reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    NE              reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    COMPARE         reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 38 (var -> ID LBRACKET expression RBRACKET .)


state 98

    (63) args_list -> args_list COMMA . expression
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    term                           shift and go to state 50
    call                           shift and go to state 49
    additive_expression            shift and go to state 42
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    expression                     shift and go to state 102

state 99

    (60) call -> ID LPAREN args RPAREN .

    TIMES           reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    LE              reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    GE              reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    NE              reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    INT             reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    COMPARE         reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 60 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 60 (call -> ID LPAREN args RPAREN .)


state 100

    (30) selection_stmt -> IF LPAREN expression RPAREN . statement
    (31) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 41
    LBLOCK          shift and go to state 26
    IF              shift and go to state 57
    WHILE           shift and go to state 38
    RETURN          shift and go to state 48
    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    expression_stmt                shift and go to state 40
    term                           shift and go to state 50
    return_stmt                    shift and go to state 39
    iteration_stmt                 shift and go to state 52
    additive_expression            shift and go to state 42
    compount_stmt                  shift and go to state 43
    call                           shift and go to state 49
    statement                      shift and go to state 103
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    selection_stmt                 shift and go to state 53
    expression                     shift and go to state 47

state 101

    (32) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    RBLOCK          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 32 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 102

    (63) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 63 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 63 (args_list -> args_list COMMA expression .)


state 103

    (30) selection_stmt -> IF LPAREN expression RPAREN statement .
    (31) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBLOCK          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 104

  ! ELSE            [ reduce using rule 30 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 104

    (31) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (30) selection_stmt -> . IF LPAREN expression RPAREN statement
    (31) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (32) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (33) return_stmt -> . RETURN SEMICOLON
    (34) return_stmt -> . RETURN expression SEMICOLON
    (35) expression -> . var EQUAL expression
    (36) expression -> . simple_expression
    (37) var -> . ID
    (38) var -> . ID LBRACKET expression RBRACKET
    (39) simple_expression -> . additive_expression relop additive_expression
    (40) simple_expression -> . additive_expression
    (48) additive_expression -> . additive_expression addop term
    (49) additive_expression -> . term
    (52) term -> . term mulop factor
    (53) term -> . factor
    (56) factor -> . LPAREN expression RPAREN
    (57) factor -> . var
    (58) factor -> . call
    (59) factor -> . NUMBER
    (60) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 41
    LBLOCK          shift and go to state 26
    IF              shift and go to state 57
    WHILE           shift and go to state 38
    RETURN          shift and go to state 48
    ID              shift and go to state 44
    LPAREN          shift and go to state 54
    NUMBER          shift and go to state 51

    expression_stmt                shift and go to state 40
    term                           shift and go to state 50
    return_stmt                    shift and go to state 39
    iteration_stmt                 shift and go to state 52
    additive_expression            shift and go to state 42
    compount_stmt                  shift and go to state 43
    call                           shift and go to state 49
    statement                      shift and go to state 105
    factor                         shift and go to state 55
    var                            shift and go to state 46
    simple_expression              shift and go to state 56
    selection_stmt                 shift and go to state 53
    expression                     shift and go to state 47

state 105

    (31) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    RBLOCK          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 31 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 103 resolved as shift
